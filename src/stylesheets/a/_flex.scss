@use "sass:map";
@use "sass:string";
@use "../from-dictionary/block-name/block-name";
@use "../utils/functions/checknull";
@use "../utils/functions/px";
@use "settings/settings";

$flex-shortname: "-f";

// .#{$uiA}#{$flex-shortname} {
//   display: flex#{$a-important};
// }

$flex-gaps: (
  "-0": 0,
  "-1": 1px,
  "-2": 2px,
  "-3": 3px,
  "-4": 4px,
  "-5": 5px,
  "-small": 5px,
  "-10": 10px,
  null: 10px,
  "-15": 15px,
  "-large": 15px,
  "-20": 20px,
  "-25": 25px,
  "-30": 30px,
  "-35": 35px,
  "-40": 40px,
  "-45": 45px,
  "-50": 50px,
  "-55": 55px,
  "-60": 60px,
  "-65": 65px,
  "-70": 70px,
  "-75": 75px,
);

$flex-properties: (
  "-j": "justify-content",
  "-a": "align-items",
  "-a-content": "align-content",
  "-a-self": "align-self"
);

$flex-properties-set: (
  "-j": (
    "-start": flex-start,
    "-end": flex-end,
    "-center": center,
    "-space-between": space-between,
    "-space-around": space-around,
    "-space-evenly": space-evenly,
    "-stretch": stretch,
  ),
  "-a": (
    "-start": flex-start,
    "-end": flex-end,
    "-center": center,
    "-baseline": baseline,
    "-stretch": stretch
  ),
  "-a-content": (
    "-start": flex-start,
    "-end": flex-end,
    "-center": center,
    "-normal": normal,
    "-baseline": baseline,
    "-stretch": stretch,
    "-space-between": space-between,
    "-space-around": space-around
  ),
  "-a-self": (
    "-auto": auto,
    "-normal": normal,
    "-start": self-start,
    "-end": self-end,
    "-flex-start": flex-start,
    "-flex-end": flex-end,
    "-center": center,
    "-baseline": baseline,
    "-first-baseline": string.unquote("first baseline"),
    "-last-baseline": string.unquote("last baseline"),
    "-stretch": stretch,
    "-safe": safe,
    "-unsafe": unsafe
  )
);

@each $flex-property-shorthand, $flex-property in $flex-properties {
  @each $flex-property-sub-shorthand, $flex-value in map.get($flex-properties-set, #{$flex-property-shorthand}) {
    .#{block-name.$uiA}#{$flex-shortname}#{$flex-property-shorthand}#{$flex-property-sub-shorthand} {
      #{$flex-property}: string.unquote("#{$flex-value}#{settings.$a-important}");
    }
  }
}

$flex-set: (
  "flex-wrap": (
    wrap,
    nowrap,
    wrap-reverse
  ),
  "flex-direction": (
    row,
    row-reverse,
    column,
    column-reverse
  )
);

@each $flex-property-name, $flex-property in $flex-set {
  @each $flex-value in $flex-property {
    .#{block-name.$uiA}#{$flex-shortname}-#{$flex-value} {
      #{$flex-property-name}: string.unquote("#{$flex-value}#{settings.$a-important}");
    }
  }
}

@for $flex-grow-value from 0 through 10 {
  .#{block-name.$uiA}#{$flex-shortname}-g-#{$flex-grow-value} {
    flex-grow: string.unquote("#{$flex-grow-value}") #{settings.$a-important};
  }
}

@each $flex-gap-name, $flex-gap-value in $flex-gaps {
  .#{block-name.$uiA}#{$flex-shortname}-gap#{checknull.checknull($flex-gap-name)} {
    gap: px.px($flex-gap-value) #{settings.$a-important};
  }
  .#{block-name.$uiA}#{$flex-shortname}-gap-column#{checknull.checknull($flex-gap-name)} {
    column-gap: px.px($flex-gap-value) #{settings.$a-important};
  }
  .#{block-name.$uiA}#{$flex-shortname}-gap-row#{checknull.checknull($flex-gap-name)} {
    row-gap: px.px($flex-gap-value) #{settings.$a-important};
  }
}

@for $flex-shrink-value from 0 through 10 {
  .#{block-name.$uiA}#{$flex-shortname}-s-#{$flex-shrink-value} {
    flex-shrink: string.unquote("#{$flex-shrink-value}") #{settings.$a-important};
  }
}

@each $flex-grow-value in (0, 1) {
  @each $flex-shrink-value in (0, 1) {
    @each $i in settings.$a-iterate-list {
      .#{block-name.$uiA}#{$flex-shortname}-#{$flex-grow-value}-#{$flex-shrink-value}-#{$i} {
        flex: #{$flex-grow-value $flex-shrink-value px.px($i)}#{settings.$a-important};
      }
      @if $i > 0 and $i < 101 {
        .#{block-name.$uiA}#{$flex-shortname}-#{$flex-grow-value}-#{$flex-shrink-value}-#{$i}\% {
          flex: #{$flex-grow-value $flex-shrink-value $i}#{'%'}#{settings.$a-important};
        }
      }
      @if ($flex-grow-value == 0 and $flex-shrink-value == 0) {
        .#{block-name.$uiA}#{$flex-shortname}-b-#{$i} {
          flex-basis: #{px.px($i)} #{settings.$a-important};
        }
        @if $i > 0 and $i < 101 {
          .#{block-name.$uiA}#{$flex-shortname}-b-#{$i}\% {
            flex-basis: #{$i}#{'%'}#{settings.$a-important};
          }
        }
      }
    }
    .#{block-name.$uiA}#{$flex-shortname}-#{$flex-grow-value}-#{$flex-shrink-value}-auto {
      flex: #{$flex-grow-value $flex-shrink-value} auto#{settings.$a-important};
    }
  }
}

@for $i from 0 through 10 {
  @each $postfix in null, "-" {
    @if $i == 0 and $postfix == "-" {}
    @else {
      .#{block-name.$uiA}#{$flex-shortname}-order-#{$i}#{$postfix} {
        order: #{$postfix}#{$i}#{settings.$a-important};
      }
    }
  }
}

.#{block-name.$uiA}-f-center {
  align-items: center#{settings.$a-important};
  justify-content: center#{settings.$a-important};
}
